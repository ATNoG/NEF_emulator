from typing import Optional, List
from datetime import datetime
from pydantic import BaseModel, Field, IPvAnyAddress, AnyHttpUrl, constr
from enum import Enum
from .utils import ExtraBaseModel

class Snssai(ExtraBaseModel):
    sst: int = Field(default=1, description="Unsigned integer representing the Slice/Service Type. Value 0 to 127 correspond to the standardized SST range. Value 128 to 255 correspond to the Operator-specific range.", ge=0, le=255)
    sd: Optional[constr(regex=r'^[0-9a-fA-F]{6}$')] = Field(default='000001', description="This value respresents the Slice Differentiator, in hexadecimal representation.")

class SubscribedEvent(str, Enum):
    ue_path = "UP_PATH_CHANGE" #The AF requests to be notified when the UP path changes for the PDU

class AfResultStatus(str, Enum):
    sucess = "SUCCESS" #The application layer is ready or the relocation is completed.
    tmp_cong = "TEMPORARY_CONGESTION" #The application relocation fails due to temporary congestion.
    reloc_no_allowed = "RELOC_NO_ALLOWED" #The application relocation fails because application relocation is not allowed.
    other = "OTHER" #The application relocation fails due to other reason.

class FlowInfo(ExtraBaseModel):
    pass

class Dnai(ExtraBaseModel):
    pass

class Gpsi(ExtraBaseModel):
    pass

class EthFlowDescription(ExtraBaseModel):
    pass

class RouteToLocation(ExtraBaseModel):
    pass

class TemporalValidity(ExtraBaseModel):
    pass

class GeographicalArea(ExtraBaseModel):
    pass

class EasIpReplacementInfo(ExtraBaseModel):
    pass

class ReportingInformation(ExtraBaseModel):
    pass

class EventNotification(ExtraBaseModel):
    """Represents a traffic influence event notification."""
    afTransId: str = Field(None, description="Identifies an NEF Northbound interface transaction, generated by the AF.")
    # dnaiChgType
    # sourceTrafficRoute: RouteToLocation
    # subscribedEvent: SubscribedEvent
    # targetTrafficRoute: RouteToLocation
    # sourceDnai: Dnai
    # targetDnai: Dnai
    # gpsi: Gpsi
    srcUeIpv4Addr: IPvAnyAddress = Field(default='10.0.0.0', description="String identifying an Ipv4 address")  
    # srcUeIpv6Prefix: IPvAnyAddress = Field(default="0:0:0:0:0:0:0:0", description="String identifying an Ipv6 address. Default value ::1/128 (loopback)")
    tgtUeIpv4Addr: IPvAnyAddress = Field(default='10.0.0.0', description="String identifying an Ipv4 address")  
    # tgtUeIpv6Prefix: IPvAnyAddress = Field(default="0:0:0:0:0:0:0:0", description="String identifying an Ipv6 address. Default value ::1/128 (loopback)")
    ueMac: Optional[constr(regex=r'^([0-9a-fA-F]{2})((-[0-9a-fA-F]{2}){5})$')] = '22-00-00-00-00-00'
    afAckUri: Optional[AnyHttpUrl] = None

class AfResultInfo(ExtraBaseModel):
    """Identifies the result of application layer handling."""
    # afStatus: AfResultStatus
    # trafficRoute: Optional[RouteToLocation]
    upBuffInd: Optional[bool] = Field(None, description="If present and set to true it indicates that buffering of uplink traffic to the target DNAI is needed.")
    # easIpReplaceInfos: Optional[List[EasIpReplacementInfo]] = Field(None, description="Contains EAS IP replacement information.", min_items=1)

class AfAckInfo(ExtraBaseModel):
    """Represents acknowledgement information of a traffic influence event notification."""
    afTransId: Optional[str]
    ackResult: AfResultInfo
    # gpsi: Optional[Gpsi]


#TODO: see required
class TrafficInfluSubCreate(ExtraBaseModel):
    """Represents a traffic influence subscription."""
    afServiceId: str = Field(None, description="Identifies a service on behalf of which the AF is issuing the request.")
    afAppId: str = Field(None, description="Identifies an application.")
    afTransId: str = Field(None, description="Identifies an NEF Northbound interface transaction, generated by the AF.")
    appReloInd: bool = Field(None, description="Identifies whether an application can be relocated once a location of the application has been selected.")
    snssai: Optional[Snssai] = None
    dnn: Optional[str] = Field("province1.mnc01.mcc202.gprs", description="String identifying the Data Network Name (i.e., Access Point Name in 4G). For more information check clause 9A of 3GPP TS 23.003")
    externalGroupId: Optional[str] = Field("Group1@domain.com", description="Identifies a group made up of one or more subscriptions associated to a group of IMSIs, containing a Domain Identifier and a Local Identifier. \<Local Identifier\>@\<Domain Identifier\>")
    anyUEInd: bool = Field(None, description="Identifies whether the AF request applies to any UE. This attribute shall set to true if applicable for any UE, otherwise, set to false.")
    subscribedEvents: List[SubscribedEvent] = Field(None, description="Identifies the requirement to be notified of the event(s).", min_items=1)
    # gpsi: Gpsi
    ipv4Addr: Optional[IPvAnyAddress] = Field(default='10.0.0.0', description="String identifying an Ipv4 address")    
    ipv6Addr: Optional[IPvAnyAddress] = Field(default="0:0:0:0:0:0:0:0", description="String identifying an Ipv6 address. Default value ::1/128 (loopback)")
    macAddr: Optional[constr(regex=r'^([0-9a-fA-F]{2})((-[0-9a-fA-F]{2}){5})$')] = '22-00-00-00-00-00'
    # ipDomain:
    # dnaiChgType
    notificationDestination: AnyHttpUrl = Field("http://localhost:80/api/v1/utils/traffic-influence/callback", description="Reference resource (URL) identifying service consumer's endpoint, in order to receive the asynchronous notification. For testing use 'http://localhost:80/api/v1/utils/session-with-qos/callback'") #Default value for development testing
    requestTestNofication: bool = Field(None, description="Set to true by the SCS/AS to request the NEF to send a test notification as defined in clause 5.2.5.3. Set to false or omitted otherwise.")
    # websockNotifConfig
    # trafficFilters: List[FlowInfo] = Field(None, description="Identifies IP packet filters.", min_items=1)
    # ethTrafficFilters: List[EthFlowDescription] = Field(None, description="Identifies Ethernet packet filters.", min_items=1)
    # trafficRoutes: List[RouteToLocation] = Field(None, description="Identifies the N6 traffic routing requirement.", min_items=1)
    tfcCorrInd: bool = None
    # tempValidities: List[TemporalValidity] = None
    #deprecated???
    validGeoZoneIds: List[str] = Field(None, description="Identifies a geographic zone that the AF request applies only to the traffic of UE(s) located in this specific zone.", min_items=1)
    # geoAreas: List[GeographicalArea] = Field(None, description="Identifies geographical areas within which the AF request applies.", min_items=1)
    afAckInd: bool = None
    addrPreserInd: bool = None
    simConnInd: bool = Field(None, description="Indicates whether simultaneous connectivity should be temporarily maintained for the source and target PSA.")
    # simConnTerm: durationSec
    # maxAllowedUpLat: uinteger
    # easIpReplaceInfos: List[EasIpReplacementInfo] = Field(None, description="Contains EAS IP replacement information.", min_items=1)
    easRedisInd: bool = Field(None, description="Indicates the EAS rediscovery is required for the application if it is included and set to true.")
    # eventReq: ReportingInformation = None
    eventReports: List[EventNotification] = Field(None, description="Hello", min_items=1)
    # suppFeat: SupportedFeatures



class TrafficInfluSub(TrafficInfluSubCreate):
    """Represents a traffic influence subscription."""
    link: Optional[AnyHttpUrl] = Field("https://myresource.com", description="String identifying a referenced resource. This is also returned as a location header in 201 Created Response")
    ipv4Addr: Optional[IPvAnyAddress] = Field(None, description="String identifying an Ipv4 address")   
    class Config:
            orm_mode = True


class TrafficInfluSubPatch(ExtraBaseModel):
    pass